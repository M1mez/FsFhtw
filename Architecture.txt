
	  C1  C2   C3  C4
	 --- ---  --- --- 
 R1	|   |   ||   | 2 |
	 --- ---  --- --- 
 R2	|   |   ||   |   |
	 === ===  === ===
 R3	|   |   ||   |   |
	 --- ---  --- --- 
 R4	|   |   ||   |   |
	 --- ---  --- --- 
 
  
 Create Sudokus:
	http://www.sudokuessentials.com/create-sudoku.html
	
 
 Planned Architecture:
	ScreenDrawing.fs 					// (Ins Terminal zeichnen)
	GridData.fs							// (1x Grid vom fertigen Sudoku/LÃ¶sung, 1x Grid vom User-Input)
		CreateValidSudoku (int size) 	// (logische Regeln (1x Zahl pro Row und Column und Box))
			ProvideHints (int 5)		// (Sinnvolle Nummern voreintragen)
	SudokuLogic.fs		
	

 Domain:
 
	type Board =
		List<Area> //?

	type Area =
		pos: Position
		cells: List<Cell>		

	type Cell =
		pos: Position
		state: CellState
		
	type CellState =
		| ConstrainedNumber
		| Empty
		
	type Position
		| horizontalPos
		| verticalPos
		
	type horizontalPos: int
	type verticalPos: int
	
	
	
	 
 Init GameBoard:
    areas -> makeBoard -> board
    cells -> makeAreas -> areas
    numbers -> makeCells -> cells
 
		
	
		
	
 
 
 
 
 
 
 
 
 3 4  1 2
 2 1  3 4
 
 1 2  4 3
 4 3  2 1
 
 
 3 4  1 _
 2 _  3 4
 
 1 2  _ 3
 4 3  2 1